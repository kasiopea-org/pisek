# Example and explanation of a config file for task made in pisek

# Move 'config' into a task folder 

# Values beginning with ! or @ are reserved and have special meaning:
# - Only ! value is !unset, which is always invalid
# - @ values autoexpand depending on context

[task]

version=v2
# Task version
# - v1 - Old version with a basic set of options. (default)
# - v2 - Current stable version, Added solution sections and redone test sections.
# - v3 - Current experimental version, generalized contest_type to use. More changes incoming.

# You can use 'pisek update' to update the config to the highest version.

name=a-plus-b
# Name of task (for automatic CMS import) (required)

contest_type=cms
# Environment for which is task developed
# kasiopea (default) / cms

task_type=communication
# Task type:
# - batch (default)
# - communication

solutions_subdir=solutions/
# Try to find solutions in this folder relative to config (defaults to .)
static_subdir=static_tests
# Try to find static inputs and outputs in this folder relative to config (defaults to .)

tests = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)

[tests]

in_gen=gen
# Source code of generator (without suffix) (required)

checker=check
# Program (without suffix) that validates inputs
# No value means no checking (default)

out_check=judge
# Describes how to check outputs (required)
#   - diff: compare with correct output (discouraged, can be slow in some cases)
#   - tokens: compare token-by-token with correct output (tokens are seperated by whitespace)
#   - shuffle: like tokens, but allow permutation of tokens
#   - judge: check with a custom program (called a 'judge')
# In communication, only judge is allowed
# For more see docs/batch_judge.md or docs/communication_judge.md

out_judge=judge
# Only for out_check=judge (required in that case)
# Source code of judge (without suffix)

judge_needs_in=0
judge_needs_out=0
# Only for task_type=batch and out_check=judge
# Set to 1 if judge needs input/correct output (default)

tokens_ignore_newlines=0
# Only for out_check=tokens
# If set to 1, newline characters will be ignored when checking the output,
# as if they were any other whitespace characters
# If set to 0, newline characters are only ignored at the end of the file (default)

tokens_ignore_case=0
# Only for out_check=tokens
# If set to 1, ASCII characters will be compared in a case-insensitive manner (defaults to 0)

tokens_float_rel_error=0.00001
tokens_float_abs_error=1e-30
# Only for out_check=tokens
# When these options are specified, floating-point numbers
# will be parsed and compared with a given error margin
# Any tokens that can't be parsed as a float will be compared character-by-character
# If used, both of these options must be specified
# To explicitly disable float checking, set both options to the empty string (default)

shuffle_mode=lines
# Only for out_check=shuffle (required in that case)
# Which permutations are allowed:
#   lines       Permutation of lines
#   words       Permutation of words within each line
#   lines_words Both lines and words
#   tokens      Permutation of all tokens, ignoring line boundaries

shuffle_ignore_case=0
# Only for out_check=shuffle
# If set to 1, ASCII characters will be compared in a case-insensitive manner (defaults to 0)

stub=src/stub
# Only for C/C++ CMS tasks
# Link each solution with given program (without suffix) (defaults to none)
# Used commonly for communication tasks

headers=src/a-plus-b.h
# Only for C/C++ CMS tasks
# Allow each solution to include the given headers (defaults to none)
# Used commonly for communication tasks

in_mode = ??? (ignored)
out_mode = ??? (ignored)
out_format = ??? (ignored)
online_validity = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)

[test01]
# Section for each test (indexed from one)

name=Test 1
# Name of the test
# @auto expands to "Test [test number]" (default)

points=3
# Number of points (<int>) (required)

in_globs=01*.in
# Which new inputs are introduced in this test.
# Supports expansion of * and ? as in shell
# @ith expands to {test_number:02}*.in (default)

file_name = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)

predecessors =
# Space separated list of tests easier than this test
# Inputs from these tests are included into this test as well
# @previous expands to previous test (or nothing if test has number <= 1) (default)

[test00]
# Section for samples tests
# Can be omitted and has the following defaults:
name=Samples
points=0
in_globs=sample*.in
predecessors=

[solution_correct]
# Section for each solution

source=solve
# Filename of the program (without suffix)
# @auto expands to name of the section without "solution_" (in this case to "correct") (default)

primary=yes
# Use this solution to generate correct outputs? (defaults to no)
# Exactly one solution has to be set to primary
# (or zero if there are no solutions in config)

points=10
# Points that program should get or X for any number of points (defaults to X)

points_above=5
points_below=7
# Upper and lower bounds on points (defaults to X)
# Cannot be set simultaneously with points

subtasks=X10
# String describing result on each test:
# 1 - success
# 0 - fail
# P - partial success
# W - wrong answer
# ! - runtime error
# T - timeout
# X - any result
#
# @all - string of 11...
# @any - string of XX...
# @auto - @all if this is primary solution, @any otherwise (default)

[limits]
# Resource limits for various programs: all of them are called KEY_LIMIT,
# where KEY is one of:
#   in_gen      Input generator
#   checker     Checker
#   judge       Judge
#   solve       Primary solution
#   sec_solve   Secondary solution usually subject to much less strict limits.
# and LIMIT is one of:
#   time_limit  Execution time limit [seconds] (defaults to 360 s)
#   clock_limit Wall clock time limit [seconds] (defaults to max(2 * time_limit, 1 s))
#   mem_limit   Memory limit [MB]  (defaults to unlimited)
#   process_limit   Maximum number of processes -- at the moment,
#           limits greater than 1 are interpreted as "unlimited". (defaults to 1)
#           Please keep in mind that killing of multiple processes
#           upon errors is inherently unreliable.
#
# Setting limit to 0 means unlimited

solve_time_limit=3

input_max_size=20
# Maximal input size [MB]
# (0 for unlimited) (defaults to 50)

output_max_size=5
# Maximal input size [MB]
# (0 for unlimited) (defaults to 10)

[cms]
# Settings related to the CMS importer
# See CMS docs (https://cms.readthedocs.io/en/latest/) for details

title=A plus B
# The name of the task shown on the task description page 
# @name expands to the task name (default)
submission_format=adder.%l
# The name of the submitted file
# .%l will be replaced with the language's file extension
# @name expands to to the task name with non-alphanumeric characters replaced with _ and .%l appended (default)

time_limit=1
# Execution time limit [seconds] (defaults to 1)
mem_limit=1024
# Memory limit [MB] (defaults to 1024)

max_submissions=50
# The number of submissions one contestant allowed to make, or X for unlimited (defaults to 50)
min_submission_interval=60
# The number of seconds a contestant has to wait between consecutive submissions (defaults to 0)

score_precision=0
# How many decimal digits scores are rounded to (defaults to 0)
score_mode=max_subtask
# Describes how the final score is computed from the scores of individual submissions
# May be 'max', 'max_subtask' (default) or 'max_tokened_last'
feedback_level=restricted
# Specifies how much information is given to the contestants about their submission
# May be 'full' or 'restricted' (default)
